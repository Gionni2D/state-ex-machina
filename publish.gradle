apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: libs.plugins.dokka.get().pluginId

def pomName = ext.pomName
def pomDescription = ext.pomDescription

def localRepoDirName = 'artifacts'
def localRepo = layout.buildDirectory.dir(localRepoDirName)

publishing {
    publications.withType(MavenPublication) { publication ->
        groupId "io.github.gionni2d"
        version "0.2.0"

        // Ref: https://github.com/gradle/gradle/issues/26091#issuecomment-1681343496
        def javadocJar = tasks.register("${publication.name}DokkaJar", Jar) {
            group = JavaBasePlugin.DOCUMENTATION_GROUP
            description = "Assembles Kotlin docs with Dokka into a Javadoc jar"
            archiveClassifier.set("javadoc")
            from(dokkaGenerate)

            // Each archive name should be distinct, to avoid implicit dependency issues.
            // We use the same format as the sources Jar tasks.
            // https://youtrack.jetbrains.com/issue/KT-46466
            archiveBaseName.set("${archiveBaseName.get()}-${publication.name}")
        }
        artifact(javadocJar)

        pom {
            name = pomName
            description = pomDescription
            url = 'https://github.com/Gionni2D/state-ex-machina'
            licenses {
                license {
                    name = 'MIT License'
                    url = 'https://raw.githubusercontent.com/Gionni2D/state-ex-machina/master/LICENSE'
                }
            }
            scm {
                connection = 'scm:git@github.com:gionni2d/state-ex-machina.git'
                url = 'https://github.com/Gionni2D/state-ex-machina.git'
            }
            developers {
                developer {
                    id = 'Gionni2D'
                    name = 'Giovanni Di Donato'
                    email = 'gionni2d@gmail.com'
                }
                developer {
                    id = 'massipetro'
                    name = 'Massimo Petrogalli'
                    email = 'maxpetrogalli@gmail.com'
                }
            }
        }
    }
    repositories {
        maven {
            url = localRepo
        }
    }
}

signing {
    sign publishing.publications
}

tasks.register("copyRepo", Copy) {
    dependsOn(publishAllPublicationsToMavenRepository)

    from localRepo.get().asFile
    into "${rootProject.buildDir}/$localRepoDirName"
}

rootProject.tasks.named("createMavenCentralRelease").configure {
    dependsOn(copyRepo)
}